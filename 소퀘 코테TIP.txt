210422
<컴공선배 코테 공부 TIP>
- 실제 기업 사례를 통해 알아보는 효율적인 코딩테스트 공부 TIP

[by. SKY]
캐치콘에 출연하게 된 계기가된 영상 입니다
https://youtu.be/4D0PYVntENw


1. 실제 기업 코테 사례

	>> 프로그래머스에서 카카오 문제 풀 수 있다.
	- 제목, 문제, 입출력 형식과 예제
	- 체점 서버 안에 미리 준비한 입출력 테스트 케이스가 들어 있다.
	- 기본적으로 대부분 부분 점수 X but, 아아주 가끔 어려운 문제중 일부 테스트 케이스는 부분 점수 주는 경우도 있다.

	입력>> 입력처리 >> solve() >> 출력 처리 >> 채점 (출력 검사)
	
	보통 {입력처리 >> solve() >> 출력 처리} = main() 함수 채우도록 테스트 봄
	가끔 가다 보면 solve() 내부만 채우도록 하는 코테도 있는데 그게 카카오
	틀은 모두 주어진다. 카카오가 어려운 편

	>> 카카오는 여러 알고리즘이 두루두루 나와서 폭도 넓고 난이도도 어려워 끝판왕
	>> 삼성은 폭은 좁지만 완전탐색 위주, 대신 구현하기 까다로운 문제가 나온다.

	>> 기업마다 난이도, 스타일이 다르지만 결국에는 공통 요소들이 있고 다 비슷한 형태


2. 일반적인 알고리즘 공부 방법들

	- 무조건 많이 풀기 >> 초반일 수록 좋다. 생소하기 때문인데 
			많이 풀다 보면 비슷한 틀이 있기 때문에 익숙해 진다.
	- 책 보며 공부하기 ex. 이것이 코딩 테스트다(입문자용), 알고리즘 문제해결 전략 1,2 (숙련자용)


3. 문제 푸는 데 필요한 요소들

	- 독해력 : 문제를 빠르고 정확하게 파악
	- 배경지식 : 필수 자료구조, 알고리즘 지식들
	- 문제 해결력 : 솔루션, 아이디어
	- 구현력 : 코딩 >> 삼성이 많이 보는 부분
	- 검증, 디버깅, 틀린 곳 or 반례 찾기


4. 효율적인 공부 법

	자료구조, 알고리즘을 먼저 다 훑고,
	문제해결력을 트레이닝 한 뒤,
	구현력만 나중에 키운다.
	>> ex. dfs를 공부하려고 했는데 코드에서 발목이 잡히면 진도가 느려진다.
	     기업 코테에서 내는 알고리즘 범위는 그리 많지 않기 때문에 가능하다.

Q1. 코테까지 1주일이 남았다면 무얼 하는게 좋을 까요?
>> A 단시간 내에 실력을 올리기는 쉽지 않다. 
     하지만 배경지식을 알고 있다면 구현력에 집중,
     어떤 코테냐에 따라 다르겠지만 그 코테를 진행하는 환경에서 연습하는 것을 추천
     IDE가 다르고 자동 완성이 안되는 것이 많기 때문에 

Q2. 코테를 위해서 새로운 언어를 배우는 것이 좋을 까요?
>> A 기업마다 지원하는 언어가 다르기 때문에 애매..
     c++, python, java는 웬만한 곳이 다 지원하기 때문에 괜춘
     구현을 할 때 만 언어가 필요한 것이기 때문에 독해력, 배경지식, 문제해결력 등과 상관이 없는 부분
     굳이 코테를 위해 언어를 새로 배우는 것은 추천하지 않는다.

Q3. 백준에서 골드급 문제를 풀 때 하루정도 고민하고 그래도 생각 안 나면 그 뒤에 풀이법을 찾아서 공부하는 게 나을까요 
     아니면 풀이가 생각날 때까지 오랜시간을 계속 생각해보는 게 좋을까요?
>> A 보통 1~1:30분 시간 잡고도 안되면 구글링 해서 힌트를 얻고 넘어가는 것을 많이들 추천한다지만
       개인의 성향에 따라 잡고 있어도 나쁘지 않다고 본다.
       대부분 코테는 고도의 사고력을 요구하는 문제는 나오지 않기 때문에 수학문제를 푸는 것과 같이 사고력을
       많이 기르려는 것이 아니기 때문에 문제 은행 형식으로 많이 푸는 것을 추천, 대회라면 말이 다르지만


Q4. 필수 자료구조, 알고리즘에 대한 정보?
>> A 자료구조: Array, Stack, Queue, Priority Queue, Map(Dictionary), Set
       알고리즘: DFS/BFS, 기초DP, 이분법(이분탐색)
        >> 이것보다 훨씬 많지만 일단 기초로 이정도는 아는 것을 추천

       각 언어마다 보통 자료구조를 제공해 준다. 이건 구글링 해서 알아보기

Q5.기업 별 알고리즘이 다르다고 하셨는데 카카오, 네이버, 삼성 등 순으로 말씀해주실 수 있나요?
>> A 카카오가 기업 코테중에 가장 어렵다. 시험시간도 5시간 7문제, 최단거리, 
        그래프 알고리즘을 포함해서 풍성하게 나온다. 카카오는 모든 문제가 오픈되어 있기 때문에 풀어 보는 것을 추천
        삼성은 DFS/BFS 시뮬레이션 자주 나온다.

Q6. 실제로 그렇게 공부하기 위한 자료는 어떤게 좋을까요? 추천하신 책은 알고리즘과 자료구조별로 문제가 나와있어서 적합하지 않다는 생각이 듭니다.
>> A 백준에서 알고리즘 스포일러를 끌 수 있는 기능이 있기 때문에 랜덤으로 문제를 풀는 것도 추천,
        사람들이 몇명 풀었는지 나와 있는데 많이들 푼 문제 추천

Q7. 자료구조와 알고리즘을 공부할때 직접 구현하는 방식으로 해도 괜찮을까요?
>> A 코테에서는 굳이 직접 구현할 필요는 없다고 생각한다. 
       삼성 B형은 라이브러리 못 쓰게 하지만 레퍼런스는 주기 때문에 제로 베이스는 아니다.
       하지만 면접에서 링크드리스트 구현해봐라 하는 경우도 있기때문에 불필요하다고 생각하지는 않는다.
       코딩테스트에서는 불필요 하지만 큰 IT기업 직무 역량 면접에서는 필요

Q8. 구현력 공부는 어떻게 하는 것이 좋을 까요?
>> A 백준에 삼성 기출 문제집이 있다. try

Q9. 수학과 같은 문제를 해결하기 위한 노리력은 어떻게 기를 수 있을 까요?
>> A 근본적인 수학적 사고력이라면 수학문제를 많이 풀어 볼 수 밖에 없다.
        하지만 지금 와서 그러기 힘들기 때문에 코테 합격을 위해서 라면 코테 문제를 많이 풀어 보는 것을 추천
>>>>Q 몇 문제?
>>>>A 백준 같은 곳에서 브론즈 100제 추천, 입문을 때면 각자 하기 나름이고 문제 수는 중요하지 않다고 생각,
           기출 문제를 함부로 풀지 말고 소중히 하쟈!ㅋㅋㅋ 어느 정도 감이 있을 때 

Q10. 어느 N사 서류합격한상태입니다. 1차면접까지 2주 남았는데 코팅테스트 힌트주신게 컬렉션위주의 문제가 나온다고하는데 
       어디까지 감을 잡아야될지 모르겠습니다. 기본적인 자료구조개념은 숙지하고 있는 상태입니다.
>> A 기업별로 기출이 있는 경우도 많기 때문에 기출 참고하는 것이 좋을 듯.
        컬렉션위주가 선형 자료구조를 뜻하는 듯 그렇다면 문제해결 능력(큐, 스택... 무엇을 쓸지)을 기르는 것이 좋을 듯

Q11. 재귀 알고리즘을 잘 이해하고 짜는 팁?
>> A 재귀도 일련의 반복 과정이기 때문에 print문을 넣어서 따라 가는 것을 추천
       재귀는 대부분 DFS나 DP가 많다. 다른 문제는 일반적인 for문을 써도 쓸 수 있을 듯,
       하노이탑의 경우 문제가 어떻게 나오냐에 따라 다르겠지만 보통 DP일 듯
     
       결과만 볼 것이 아니라 중간 중간 print문을 많이 심어서 
       내가 의도한 대로 잘 돌아가고 있는지 쪼개서 생각하고 과정을 확인 하는 것을 추천

Q12. 자바 관련 자료구조, 알고리즘 책 추천?
>> A 사실 언어는 중요하지 않기 때문에 언어와 상관없이 책을 사서 내 언어로 바꿔 공부하는 것을 추천
        왜? 문법은 중요하지 않기 때문에 내 언어로 바꾸며 배운는 것이 많다.

Q13. 알고리즘 대표사이트 : 외국계사이트(릿코드,해커랭크,코딜리티), 국내사이트 : 백준,프로그래머스,구름   기업마다 출제가 다르다보니 한번씩 풀어보고 있습니다. 
       모든사이트를 다 풀어보는게 정답일지 아니면 한사이트에 올인하는게 더빠를까요?
>> A 굳이 다 건드려 볼 필요는 없다고 생각, 하지만 내가 지원한 기업에서 특정 사이트를 이용한다면 그것으로 연습해 보길 추천

Q14. 코딩테스트에서 코딩스타일도 보는데 혹시 참고할만한 도서나 자료있을까요?
>> A 온라인 코테는 대리시험 때문에 면접에서 검증하는 곳이 많다. 
        따라서 코딩 스타일도 많이 보게 된 것 같은데 사실 코딩 스타일은 많이 신경 안쓴다.
        신경 쓰고 싶다면 같은 문제에서 다른 사람이 푼 코드를 많이 보기
        코테보다는 협업을 통한 일을 하며 코딩스타일을 올리는 것이 좋다고 본다. 또는 오픈소스를 많이 보기

Q15. 다른 사람이 푼 정답 코드엔 문제를 풀기 위한 접근 방식이 생략된 채 답만 나와있는데, 
       이런 경우엔 제가 생각한 접근 방식과 어떻게 비교할 수 있나요?
>> A 블로그에서 보면 설명과 함께 올려둔 사람이 많아서 참고하는 것도 방법, 
        스터디를 하고 있다면 추천하지만 냅다 남의 코드를 보는 것은 그렇게 추천하지 않는다.

Q16. 정확도까지는 어떻게든 맞추는데 효율성에서 많이 떨어집니다. 단기간에 효율성 올리는 방법이 있을까요?
>> A 성능 최적화면에서 라면 중간중간 로그를 심어서 시각적으로 확인 하고 쓸데 없는 짓을 확인하고 없애기
        보통 풀이법이 있다. 풀이법대로 했는대도 효율이 안나온다면 그건 어딘가에서 삽질하고 있는 것

Q17. 면접 때 라이브 코딩테스트를 본다고 하는데 준비할 수 있는 방법이 있을까요?
>> A 메모장으로 코테를 푸는 연습을 하세용

Q18. 코드업 100제 기본문제를 다 풀었는데요, 그 이후부턴 뭘 풀어야할지를 모르겠습니다. 백준 브론즈 풀면 될까요?
>> A 배경지식 별로 준비를 할 것이기 때문에 문제가 좀 쉽다! 이러면 그만 풀어야 한다. 
        문제를 푸는 이유는 모르는 것을 찾기 위함이니 잘 풀리면 어려운 문제로 넘어가기

Q19. 코드를 짜면 정상으로 돌아가긴 하는데 인터넷이나 정답 코드를 보면 제것보단 엄청 깔끔하더라구요.
       이런걸 개선하려면 무슨 연습을 해야하나요??
>> A 이런 것은 코테가 아닌 직무 면접에서 주로 보는 것 같다. 

Q20. 지인들이 코딩 스터디 하는 것을 보면 문제를 풀어오고 각자 어떻게 풀었는지 설명해주는 방식으로 하던데, 
       만약 좋은 스터디 운영 방식이 있다면 추천 부탁드립니다.
>> A 비슷한 실력에서 어떻게 풀지 토론을 먼저 하는 것을 추천

Q21. DFS는 재귀로푸는방법 재귀없이 푸는 방법 많이 나오던데 사람마다 차이가 있겠지만 권장하는건 재귀인가요?
>> A 편하신 대로, 보통은 재귀로 풀기는 하지만 스택도 따지고 보면 재귀

Q22. 혹시 최종합격까지 가기 위해서는 코딩테스트/컴퓨터공학 지식 말고도 프로젝트 경험도 많이 중요한지 궁금합니다. 
       뭔가 어느정도 규모나 기술력이 있는 프로젝트 경험이 딱히 없다고 여겨져서 자신이 좀 없네요
>> A 프로젝트 경험 중요하다! 필요하다!

Q23. 히든 테스트 케이스 오류를 개선하는 방법?
>> A 우연히 답을 맞추는 경우가 굉장히 많기때문에 중간 과정 로그 심어서 꼭 체크하기
        디버깅은 무겁고 오래 걸리기 때문에 시험중에는 IDE  디버깅 기능 사용 추천X printf 사용하는 것을 추천

 Q24. 시험 볼때 시간 분배 팁
>> A 모든 문제부터 읽어 보고 괜찮은 것 부터 풀기, 문제 난이도가 꼭 오름차순은 아닌 경우가 있기때문에





	